[0m[[0minfo[0m] [0m[32mBoardSpec:[0m[0m
[0m[[0minfo[0m] [0m[32m*initBoard[0m[0m
[0m[[0minfo[0m] [0m[32m- it should return a List of the size indicated, from 1 to Dimension[0m[0m
[0m[[0minfo[0m] [0m[32m*returnRows[0m[0m
[0m[[0minfo[0m] [0m[32m- should return a list of row lists[0m[0m
[0m[[0minfo[0m] [0m[32m*returnColumns[0m[0m
[0m[[0minfo[0m] [0m[32m- should return a list of column lists[0m[0m
[0m[[0minfo[0m] [0m[32m*returnDiagonals[0m[0m
[0m[[0minfo[0m] [0m[32m- should return a list of diagonal lists[0m[0m
[0m[[0minfo[0m] [0m[32m*checkSets[0m[0m
[0m[[0minfo[0m] [0m[32m- should return true if one list in a list of lists has identical values internally[0m[0m
[0m[[0minfo[0m] [0m[32m- should return return false if no list in a list of lists has identical values[0m[0m
[0m[[0minfo[0m] [0m[32m- should return true if there is a diagonal win[0m[0m
[0m[[0minfo[0m] [0m[32m*checkWin[0m[0m
[0m[[0minfo[0m] [0m[32m- should return true if a winning board[0m[0m
[0m[[0minfo[0m] [0m[32m- should return false if not a winning board[0m[0m
[0m[[0minfo[0m] [0m[32m*checkSpace[0m[0m
[0m[[0minfo[0m] [0m[32m- should return true if there is open spaces[0m[0m
[0m[[0minfo[0m] [0m[32m- should return false if there is no open spaces[0m[0m
[0m[[0minfo[0m] [0m[32m*checkTie[0m[0m
[0m[[0minfo[0m] [0m[32m- should return false if there is no tie[0m[0m
[0m[[0minfo[0m] [0m[32m- should return false if there are moves left[0m[0m
[0m[[0minfo[0m] [0m[32m- should return true if no winner and no moves[0m[0m
[0m[[0minfo[0m] [0m[32m- should be false if there is a winner and no moves[0m[0m
[0m[[0minfo[0m] [0m[32m*gameOver[0m[0m
[0m[[0minfo[0m] [0m[32m- should return true if no moves are left[0m[0m
[0m[[0minfo[0m] [0m[32m- should return false if moves are left and no winner[0m[0m
[0m[[0minfo[0m] [0m[32m- should return true if there is a winning set[0m[0m
